{"version":3,"sources":["components/common/Preloader/preloader.svg","components/Header/Header.module.css","components/common/Preloader/Preloader.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/logoRF.png","components/Header/logoRF_mobile.png","components/common/RenderField/RenderField.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","redux/dialogsReducer.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/SendMessageForm.tsx","components/HOCs/withAuth.tsx","redux/profileReducer.tsx","components/util/reduxSelector.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","api/socialNetworkAPI.tsx","redux/usersReducer.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.tsx","components/Users/UsersAPIComponent.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHOC.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/authReducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsConteiner.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/SiteLogoComp/SiteLogo.tsx","components/Header/Header.tsx","components/util/validators.ts","redux/appReducer.tsx","components/Header/HeaderContainer.tsx","components/common/RenderField/RenderField.tsx","components/Login/Login.tsx","App.tsx","redux/storeRedux.tsx","index.tsx","components/Profile/MyPosts/MyPosts.module.css","components/Users/Users.module.css","assets/images/user.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","styles","nav","item","to","activeClassName","active","navLink","size","color","item_value","Music","props","News","Settings","dialoguesInitialState","dialogs","id","v1","name","messages","message","newMessageInTextArea","Message","Dialog","dialog","DialogsReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","type","text","button","SendMessageForm","formData","sendMessage","newMessage","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","restProps","ProfileReducer","getDialoguesList","dialogsPage","getMessagesList","getRegisteredUserId","getRegisteredUserLogin","login","getIsAuth","getIsFetching","isFetching","getProfile","profilePage","profile","getTextAreaForStatus","textAreaForUserStatus","getUserStatus","status","getUsers","usersPage","users","getTotalUsersCount","totalCount","getPageSize","pageSize","getCurrentPage","currentPage","getIsFetchingUsers","getFriendsList","followingInProgress","DialogsContainer","compose","dialoguesList","messagesList","dispatch","onChange","e","newText","currentTarget","value","map","d","key","m","React","createRef","dialogsItem","instance","axios","create","baseURL","withCredentials","headers","UsersAPI","get","then","res","data","userId","post","delete","AuthAPI","ProfileAPI","put","SET_USERS","set_users","set_users_total_count","toggle_isFetching","toggle_followingInProgress","usersInitialState","Users","pagesQuantity","Math","ceil","pagesArray","i","push","pageCount","marginPagesDisplayed","pageRangeDisplayed","initialPage","onPageChange","p","onSetNewCurrentPage","selected","breakClassName","breakMe","containerClassName","pagination","u","src","undefined","photos","small","userPhoto","alt","followed","disabled","some","onClick","unfollowUser","followUser","Preloader","wrapper","preloader","UsersAPIComponent","pageNumber","setUpCurrentPage","this","setUpAllUsers","Component","UsersContainer","items","set_users_currentPageSUCCESS","resultCode","userID","ProfileStatusWithHOC","useState","editMode","setEditMode","setIsMode","authorizedUserID","autoFocus","onBlur","showStatusTextInTextareaSuccess","onKeyPress","updateUserStatus","ProfileInfo","img","descriptionBlok","large","fullName","aboutMe","profileInitialState","posts","likesCount","newPostInTextArea","setNewProfile","SetNewProfile","statusChanging","ShowStatusTextInTextarea","setUserStatusSuccess","SetUserStatus","AUTH_REDUCER_ACTION_TYPE","Post","PostReduxForm","AddPostForm","addNewPost","newPost","MyPosts","MyPostsContainer","textAreaState","AddPOST","newPostValue","AddPostAC","showTextInTextarea","NewText","ShowTextInPostTextarea","Profile","ProfileContainer","currentUserID","params","getUserProfile","withRouter","setUserStatus","SiteLogo","site_logo","logoRF","desktop","logoRF_mobile","mobile","Header","hideMenu","setHideMenu","onMenuStyle","display","offMenuStyle","header","bar","left_content","style","right_content","icon_avatar","icon_avatar_text","registeredUserId","icon_messages_text","registeredUserLogin","icon_messages","icon_alerts","href","icon_alerts_text","sign_off","logoutUser","max","min","APP_ACTION_TYPE","setAuthUserData","SET_AUTH_REDUCER_USER_DATA","toggleIsFetchingInAuthReducer","TOGGLE_IS_FETCHING_REDUCER_USER_DATA","authInitialState","email","setUserProfile","LOG_OUT_REDUCER_USER_DATA","alert","catch","error","HeaderContainer","required","maxLength30","length","minLength5","emailValidator","test","RenderField","input","label","placeholder","meta","touched","warning","LoginReduxForm","submitting","pristine","reset","validate","LoginContainer","authorize","app","loginUser","stopSubmit","initialState","App","authorizeUser","path","render","rest","AUTHORIZE","rootReducer","combineReducers","action","stateCopy","filter","formReducer","store","createStore","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9380be38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.c5af9753.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x1JW\",\"site_logo\":\"Header_site_logo__1Z_BO\",\"desktop\":\"Header_desktop__2r-2V\",\"mobile\":\"Header_mobile__1daiy\",\"bar\":\"Header_bar__1Ozpu\",\"left_content\":\"Header_left_content__2F_oj\",\"right_content\":\"Header_right_content__3SbLi\",\"icon_avatar\":\"Header_icon_avatar__28I_b\",\"icon_messages\":\"Header_icon_messages__2ilE9\",\"icon_alerts\":\"Header_icon_alerts__1stqq\",\"sign_off\":\"Header_sign_off__2W4Ad\",\"icon_messages_text\":\"Header_icon_messages_text__2JAxS\",\"icon_alerts_text\":\"Header_icon_alerts_text__1eG2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1qyFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3bDWm\"};","module.exports = __webpack_public_path__ + \"static/media/logoRF.fc12e143.png\";","module.exports = __webpack_public_path__ + \"static/media/logoRF_mobile.66bab914.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"RenderField_formControl__LloQg\",\"error\":\"RenderField_error__1tSlR\",\"span\":\"RenderField_span__2KDS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsApp\":\"Dialogs_dialogsApp__22Ndb\",\"usersList\":\"Dialogs_usersList__WsQb-\",\"dialogs\":\"Dialogs_dialogs__RmMa5\",\"dialogsItem\":\"Dialogs_dialogsItem__1ArK6\",\"dialog\":\"Dialogs_dialog__1Vhf9\",\"messages\":\"Dialogs_messages__ya3HD\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport styles from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {FaUserCircle, FaFacebookMessenger, FaRegNewspaper,FaHeadphones, FaBarcode, FaUsers} from 'react-icons/fa';\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/profile\" activeClassName={styles.active} className={styles.navLink}>\r\n                    <FaUserCircle  size={\"1.5rem\"} color=\"#20B2AA\"/>\r\n                    <span className={styles.item_value}>Profile</span>\r\n                </NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={styles.active} className={styles.navLink}>\r\n                    <FaFacebookMessenger  size={\"1.5rem\"} color=\"#20B2AA\"/>\r\n                    <span className={styles.item_value}>Messages</span>\r\n                </NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/news\" activeClassName={styles.active} className={styles.navLink}>\r\n                    <FaRegNewspaper  size={\"1.5rem\"} color=\"#20B2AA\"/>\r\n                    <span className={styles.item_value}>News</span>\r\n                </NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/music\" activeClassName={styles.active} className={styles.navLink}>\r\n                    <FaHeadphones  size={\"1.5rem\"} color=\"#20B2AA\"/>\r\n                    <span className={styles.item_value}>Music</span>\r\n                </NavLink>\r\n            </div>\r\n\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/users\" activeClassName={styles.active} className={styles.navLink}>\r\n                    <FaUsers size={\"1.5rem\"} color=\"#20B2AA\"/>\r\n                    <span className={styles.item_value}>Users</span>\r\n                </NavLink>\r\n            </div>\r\n\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/settings\" activeClassName={styles.active} className={styles.navLink}>\r\n                    <FaBarcode size={\"1.5rem\"} color=\"#20B2AA\"/>\r\n                    <span className={styles.item_value}>Settings</span>\r\n                </NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\ntype MusicType = { }\r\n\r\nconst Music:React.FC<MusicType> = (props) => {\r\n    return(<div>\r\n        Enjoy free music\r\n    </div>)\r\n}\r\nexport default Music;","import React from 'react';\r\n\r\n\r\ntype NewsType = { }\r\n\r\nconst News:React.FC<NewsType> = (props) => {\r\n    return(<div>\r\n        Latest news    </div>)\r\n}\r\nexport default News;","import React from 'react';\r\n\r\n\r\ntype SettingsType = { }\r\n\r\nconst Settings:React.FC<SettingsType> = (props) => {\r\n    return(<div>\r\n        Settings\r\n    </div>)\r\n}\r\nexport default Settings;","import {ActionsTypes} from './state';\r\nimport {DialogsPagePropsType} from '../components/Dialogs/Dialogs';\r\nimport {v1} from 'uuid';\r\n\r\n\r\nconst SendMessageString = 'SEND-MESSAGE';\r\n\r\nconst ShowMessageInTextareaString = 'SHOW-MESSAGE-IN-TEXTAREA';\r\n\r\nexport const SendMessageOrderAC = (Newmessage: string) => ({\r\n    type: SendMessageString,\r\n    message: Newmessage\r\n} as const);\r\n\r\nexport const ShowMessageInTextareaAC = (newText: string) => ({\r\n    type: ShowMessageInTextareaString,\r\n    newText: newText\r\n} as const);\r\n\r\n\r\nconst dialoguesInitialState: DialogsPagePropsType = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Mike'},\r\n        {id: v1(), name: 'Silas'},\r\n        {id: v1(), name: 'Mariana'},\r\n        {id: v1(), name: 'Jimmy'},\r\n        {id: v1(), name: 'Andy'},\r\n        {id: v1(), name: 'Delfin'}\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: 'That\\'s a good question! I\\'ll find out'},\r\n        {id: v1(), message: 'I have the exact same question'},\r\n        {id: v1(), message: 'I have no clue'},\r\n        {id: v1(), message: 'Why don\\'t we ask Alex?'},\r\n        {id: v1(), message: 'How should I know?'},\r\n        {id: v1(), message: 'How should I know?'}\r\n    ],\r\n    newMessageInTextArea: ''\r\n}\r\n\r\n\r\nexport const dilogsReducer = (state = dialoguesInitialState, action: ActionsTypes): DialogsPagePropsType => {\r\n    switch (action.type) {\r\n        case SendMessageString: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages,{id: v1(), message: action.message}],\r\n                newMessageInTextArea: ''\r\n            };\r\n        }\r\n        case ShowMessageInTextareaString: {\r\n\r\n            return {\r\n                ...state,\r\n                newMessageInTextArea: action.newText\r\n            };\r\n        }\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport styles from './../Dialogs.module.css';\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string | number\r\n}\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={styles.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from './../Dialogs.module.css';\r\n\r\n\r\nexport type DialogWithFriend = {\r\n    id: string\r\n    name: string\r\n}\r\nconst Dialog: React.FC<DialogWithFriend> = (props) => {\r\n    return <div className={styles.dialog}><NavLink to={'/dialogs/' + props.id}> {props.name} </NavLink></div>\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\n\r\n\r\nconst DialogsTextarea : React.FC<InjectedFormProps<DialogsFormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name=\"newMessage\" component=\"textarea\" type=\"text\" className={styles.text}/>\r\n            </div>\r\n            <button type=\"submit\" className={styles.button}>Send message</button>\r\n        </form>\r\n    )\r\n}\r\nconst DialogsReduxForm = reduxForm<DialogsFormDataType>({\r\n    form: 'SendMessageForm'\r\n})(DialogsTextarea)\r\n\r\n\r\nexport const SendMessageForm = (props:DialogsFormPropsType) => {\r\n    const onSubmit = (formData: DialogsFormDataType) => {\r\n        props.sendMessage(formData.newMessage)\r\n    }\r\n    return <div>\r\n        <DialogsReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\n\r\ntype DialogsFormDataType = {\r\n    newMessage: string\r\n}\r\ntype DialogsFormPropsType = {\r\n    sendMessage: (message: string) => void\r\n}","import React from 'react';\r\nimport {RootState} from '../../redux/storeRedux';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\n\r\nexport function withAuthRedirect<P>(WrappedComponent: React.ComponentType<P>) {\r\n    const withIsAuth = (props: MapStateToPropsType & {}) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to=\"/lang\"/>\r\n\r\n        }\r\n\r\n        return <WrappedComponent {...restProps as P}/>\r\n    }\r\n    return connect<MapStateToPropsType, {}, P, RootState>(mapStateToProps)(withIsAuth)\r\n}\r\n","import {ProfileType} from '../components/Profile/Profile';\r\nimport {v1} from 'uuid';\r\nimport {Dispatch} from 'redux';\r\nimport {ProfileAPI} from '../api/socialNetworkAPI';\r\nimport {PostType} from '../components/Profile/MyPosts/Post/Post';\r\n\r\n// Initial State\r\n\r\nconst profileInitialState:ProfileStateType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hola Ladies', likesCount: 0},\r\n        {id: v1(), message: 'How are you?', likesCount: 12},\r\n        {id: v1(), message: 'I\\'m glad to see you', likesCount: 432},\r\n        {id: v1(), message: 'Or not', likesCount: 2}\r\n    ],\r\n    newPostInTextArea: '',\r\n    profile: null,\r\n    textAreaForUserStatus: '',\r\n    status: '',\r\n\r\n}\r\n//[] as Array<string>,\r\n\r\n// Reducer\r\n\r\nexport const profileReducer = (state = profileInitialState, action: ProfileReducerActionsTypes): ProfileStateType => {\r\n    switch (action.type) {\r\n        case ProfileReducer.AddPOST: {\r\n            return {\r\n                ...state,\r\n                posts: [{id: v1(), message: action.newPostValue, likesCount: 0}, ...state.posts],\r\n                newPostInTextArea: ''\r\n            }\r\n        }\r\n        case ProfileReducer.ShowTextInPostTextarea: {\r\n            return {\r\n                ...state,\r\n                newPostInTextArea: action.text\r\n            };\r\n        }\r\n        case ProfileReducer.SetNewProfile: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case ProfileReducer.ShowStatusTextInTextarea: {\r\n            return {\r\n                ...state,\r\n                textAreaForUserStatus: action.statusChanging,\r\n            }\r\n        }\r\n        case ProfileReducer.SetUserStatus: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\n\r\n// Thunk Creator\r\n\r\nexport const setUserStatus = (id: string) => (dispatch: Dispatch) => {\r\n    ProfileAPI.getUserStatus(id).then((status) => {\r\n        dispatch(showStatusTextInTextareaSuccess(status))\r\n        dispatch(setUserStatusSuccess(status))\r\n\r\n    })\r\n\r\n}\r\n\r\nexport const updateUserStatus = (status: string,) => (dispatch: Dispatch) => {\r\n    ProfileAPI.updateUserStatus(status).then((data) => {\r\n        if (data.resultCode === 0) {\r\n            dispatch(showStatusTextInTextareaSuccess(status))\r\n            dispatch(setUserStatusSuccess(status))\r\n        }\r\n    })\r\n\r\n}\r\n\r\n\r\n// get the profile information of user\r\nexport const getUserProfile = (id: string) => (dispatch: Dispatch<ProfileReducerActionsTypes | any>) => {\r\n    ProfileAPI.getUserProfile(id).then((res) => {\r\n            dispatch(setNewProfile(res))\r\n            dispatch(setUserStatus(res.userId))\r\n        }\r\n    )\r\n}\r\n\r\n\r\n// Action creators\r\n\r\nexport const AddPostAC = (newPost: string) => ({\r\n    type: ProfileReducer.AddPOST,\r\n    newPostValue: newPost\r\n} as const);\r\n\r\nexport const ShowPostTextInTextareaAC = (NewText: string) => ({\r\n    type: ProfileReducer.ShowTextInPostTextarea,\r\n    text: NewText\r\n} as const);\r\n\r\nexport const setNewProfile = (profile: ProfileType) => ({\r\n    type: ProfileReducer.SetNewProfile,\r\n    profile,\r\n} as const);\r\n\r\nexport const showStatusTextInTextareaSuccess = (statusChanging: string) => ({\r\n    type: ProfileReducer.ShowStatusTextInTextarea,\r\n    statusChanging,\r\n} as const);\r\n\r\nexport const setUserStatusSuccess = (status: string) => ({\r\n    type: ProfileReducer.SetUserStatus,\r\n    status,\r\n} as const);\r\n\r\n\r\n// Types\r\nexport enum ProfileReducer {\r\n    AddPOST = 'PROFILE-REDUCER-ADD-POST',\r\n    ShowTextInPostTextarea = 'PROFILE-REDUCER-SHOW-POST-IN-TEXTAREA',\r\n    SetNewProfile = 'PROFILE-REDUCER-SET-NEW-PROFILE',\r\n    ShowStatusTextInTextarea = 'PROFILE-REDUCER-SHOW-STATUS-IN-TEXTAREA',\r\n    SetUserStatus = 'PROFILE-REDUCER-SET-USER-STATUS',\r\n}\r\n\r\nexport type ProfileReducerActionsTypes =\r\n    | ReturnType<typeof AddPostAC>\r\n    | ReturnType<typeof ShowPostTextInTextareaAC>\r\n    | ReturnType<typeof setNewProfile>\r\n    | ReturnType<typeof showStatusTextInTextareaSuccess>\r\n    | ReturnType<typeof setUserStatusSuccess>\r\n\r\ntype ProfileStateType = {\r\n    posts: Array<PostType>\r\n    newPostInTextArea: string\r\n    profile: ProfileType | null\r\n    textAreaForUserStatus: string\r\n    status: string\r\n}","import {RootState} from '../../redux/storeRedux';\r\nimport {DialogWithFriend} from '../Dialogs/Dialog/Dialog';\r\nimport {MessageType} from '../Dialogs/Message/Message';\r\nimport {ProfileType} from '../Profile/Profile';\r\nimport {UsersType} from '../../redux/usersReducer';\r\n\r\n// SELECTORS\r\n\r\n// For dialogs component\r\n\r\nexport const getDialoguesList = (state: RootState): DialogWithFriend[] => state.dialogsPage.dialogs\r\nexport const getMessagesList = (state: RootState): MessageType[] => state.dialogsPage.messages\r\n\r\n// For header component\r\n\r\nexport const getRegisteredUserId = (state: RootState): string|null => state.auth.id\r\nexport const getRegisteredUserLogin = (state: RootState): string|null => state.auth.login\r\nexport const getIsAuth = (state: RootState): boolean=>{   // checking that the user is authorized in the app\r\n    return state.auth.isAuth\r\n}\r\nexport const getIsFetching = (state: RootState): boolean=>{   // checking IsFetching property (required to display data)\r\n    return state.auth.isFetching\r\n}\r\n\r\n// For profile component\r\n\r\nexport const getProfile = (state: RootState): ProfileType | null => state.profilePage.profile\r\nexport const getTextAreaForStatus = (state: RootState): string => state.profilePage.textAreaForUserStatus\r\nexport const getUserStatus = (state: RootState): string => state.profilePage.status\r\n\r\n\r\n// For users component\r\nexport const getUsers = (state: RootState): Array<UsersType> =>state.usersPage.users\r\nexport const getTotalUsersCount = (state: RootState): number =>{ // // checking how many the users are authorized in system\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getPageSize = (state: RootState): number =>{ // // checking how many the users will be on one page\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getCurrentPage = (state: RootState): number =>{ // set the current page number in the user list\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetchingUsers = (state: RootState): boolean=> state.usersPage.isFetching\r\n\r\nexport const getFriendsList = (state: RootState): Array<string>=> state.usersPage.followingInProgress\r\n","import React, {ChangeEvent, ComponentType} from 'react';\r\nimport {MessageType} from './Message/Message';\r\nimport {DialogWithFriend} from './Dialog/Dialog';\r\nimport {SendMessageOrderAC, ShowMessageInTextareaAC} from '../../redux/dialogsReducer';\r\nimport {Dialogs, DialogsType2} from './Dialogs';\r\nimport {MyContext} from '../../redux/MyContext';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/storeRedux';\r\nimport {DispatchType} from '../../redux/state';\r\nimport {ShowPostTextInTextareaAC} from '../../redux/profileReducer';\r\nimport {PostType} from '../Profile/MyPosts/Post/Post';\r\nimport {UsersAPIComponent} from '../Users/UsersAPIComponent';\r\nimport {withAuthRedirect} from '../HOCs/withAuth';\r\nimport {compose} from 'redux';\r\nimport {getDialoguesList, getMessagesList} from '../util/reduxSelector';\r\n\r\n\r\nexport type DialogsPagePropsType = {\r\n    dialogs: Array<DialogWithFriend>\r\n    messages: Array<MessageType>\r\n}\r\n\r\n\r\ntype mapStateToPropsReturnType = {\r\n    dialoguesList: DialogWithFriend[]\r\n    messagesList: MessageType[]\r\n}\r\ntype mapDispatchToPropsReturnType = {\r\n    sendMessage: (message: string) => void\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsReturnType => ({\r\n    dialoguesList: getDialoguesList(state),\r\n    messagesList: getMessagesList(state),\r\n})\r\nconst mapDispatchToProps = (dispatch: DispatchType): mapDispatchToPropsReturnType => ({\r\n    sendMessage: ( message: string) => dispatch(SendMessageOrderAC(message)),\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => dispatch(ShowMessageInTextareaAC(e.currentTarget.value))\r\n})\r\n\r\n\r\n\r\n\r\nexport const DialogsContainer = compose <ComponentType>(\r\n    connect<mapStateToPropsReturnType, mapDispatchToPropsReturnType, DialogsType2, RootState>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport Message, {MessageType} from './Message/Message';\r\nimport Dialog, {DialogWithFriend} from './Dialog/Dialog';\r\nimport {SendMessageOrderAC} from '../../redux/dialogsReducer';\r\nimport {SendMessageForm} from './SendMessageForm';\r\n\r\nexport type DialogsPagePropsType = {\r\n    dialogs: Array<DialogWithFriend>\r\n    messages: Array<MessageType>\r\n    newMessageInTextArea: string\r\n}\r\n\r\n\r\nexport type DialogsType2 = {\r\n    dialoguesList: DialogWithFriend[]\r\n    messagesList: MessageType[]\r\n    sendMessage: (message: string) => void\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    messageStartAreaValue: string\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsType2> = (props) => {\r\n\r\n    let dialoguesList = props.dialoguesList.map(d => <Dialog id={d.id} name={d.name} key={d.id}/>);\r\n    let messagesList = props.messagesList.map(m => <Message id={m.id} message={m.message} key={m.id}/>);\r\n\r\n    let messageElementRef = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const onClick = () => {\r\n        if (messageElementRef.current && messageElementRef.current.value.trim() !== '') {\r\n            let NewMessage = messageElementRef.current.value;\r\n            props.sendMessage(NewMessage);\r\n        }\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClick();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n\r\n            <div className={styles.messages}>\r\n                {messagesList}\r\n                <SendMessageForm sendMessage={props.sendMessage}/>\r\n            </div>\r\n\r\n            <div className={styles.dialogsItem}>\r\n                {dialoguesList}\r\n            </div>\r\n        </div>)\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\nimport {LoginFormDataType} from '../components/Login/Login';\r\nimport {ProfileType} from '../components/Profile/Profile';\r\n\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'ee542fb7-1a9c-4a81-99e7-a73b8549f173'},\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    ...setting,\r\n})\r\n\r\n\r\n// API Objects\r\n\r\nexport const UsersAPI = {\r\n    getUsers(pageSize = 10, currentPage = 1,) {\r\n        return instance.get<GetUsersType>(`users?count=${pageSize}&page=${currentPage}`).then((res) => res.data)\r\n    },\r\n    foolowUser(userId: string, data = {},) {\r\n        return instance.post<RequestType<{}>>(`follow/${userId}`, data).then((res) => res.data)\r\n    },\r\n    unfollowUser(userId: string,) {\r\n        return instance.delete<RequestType<{}>>(`follow/${userId}`).then((res) => res.data)\r\n    },\r\n}\r\n\r\nexport const AuthAPI = {\r\n    //Is current user authorized\r\n    authMe() {\r\n        return instance.get<RequestType<AuthMeDataType>>('auth/me').then(res => res.data)\r\n    },\r\n    //Authorize on the service\r\n    login(data: LoginFormDataType) {\r\n        return instance.post<RequestType<{ userId?: string }>>('auth/login', data).then(res => res.data)\r\n    },\r\n    //Unfollow requested user\r\n    logout() {\r\n        return instance.delete<RequestType<{}>>('auth/login').then(res => res.data)\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUserProfile(userId: string,) {\r\n        return  instance.get<ProfileType>(`/profile/${userId}`).then(res => res.data)\r\n    },\r\n    getUserStatus(userId: string,) {\r\n        return instance.get<string>(`/profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateUserStatus(status: string,) {\r\n        return instance.put<RequestType<{}>>(`/profile/status/`, {status}).then(res => res.data)\r\n    },\r\n}\r\n\r\n\r\n// Types\r\n\r\ntype GetUsersType = {\r\n    'items': Array<ServerUserType>\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\n\r\ntype ServerUserType = {\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: null | string\r\n    photos: {\r\n        small: null | string\r\n        large: null | string\r\n    },\r\n    status: null | string\r\n    followed: boolean\r\n}\r\n\r\n\r\ntype RequestType<T> = {\r\n    data: T\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n}\r\n\r\ntype AuthMeDataType = {\r\n    id: string\r\n    login: string\r\n    email: string\r\n}","import {ActionsTypes} from './state';\r\nimport {v1} from 'uuid';\r\nimport {Dispatch} from 'redux';\r\nimport {UsersAPI} from '../api/socialNetworkAPI';\r\n\r\n\r\nconst FOLLOWString = 'USERS/USERS_PAGE/FOLLOW';\r\nconst UNFOLLOWString = 'USERS/USERS_PAGE/UNFOLLOW';\r\nconst SET_USERS = 'USERS/USERS_PAGE/SET_USERS';\r\nconst SET_USERS_TOTAL_COUNT = 'USERS/USERS_PAGE/USERS_TOTAL_COUNT';\r\nconst SET_USERS_CURRENT_PAGE = 'USERS/USERS_PAGE/USERS_CURRENT_PAGE';\r\nconst IS_FETCHING_USERS_LIST = 'USERS/USERS_PAGE/IS_FETCHING_USERS_LIST';\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'USERS/USERS_PAGE/TOGGLE_FOLLOWING_IN_PROGRESS';\r\n\r\nexport const follow_userSUCCESS = (userID: string | number) => {\r\n    return {\r\n        type: FOLLOWString,\r\n        userID: userID,\r\n    } as const\r\n};\r\n\r\nexport const unfollow_userSUCCESS = (userID: string | number) => ({\r\n    type: UNFOLLOWString,\r\n    userID: userID,\r\n} as const);\r\n\r\n\r\nexport const set_users = (users: Array<UsersType>) => ({\r\n    type: SET_USERS,\r\n    users: users,\r\n} as const)\r\n\r\n\r\nexport const set_users_total_count = (totalCount: number) => ({\r\n    type: SET_USERS_TOTAL_COUNT,\r\n    totalCount: totalCount,\r\n} as const)\r\n\r\nexport const set_users_currentPageSUCCESS = (currentPage: number) => ({\r\n    type: SET_USERS_CURRENT_PAGE,\r\n    currentPage,\r\n} as const)\r\n\r\nexport const toggle_isFetching = (isFetching: boolean) => ({\r\n    type: IS_FETCHING_USERS_LIST,\r\n    isFetching,\r\n} as const)\r\n\r\nexport const toggle_followingInProgress = (isFetching: boolean, userId: string) => ({\r\n    type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n    isFetching,\r\n    userId,\r\n} as const)\r\n\r\n\r\ntype UsersLocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nexport type UsersType = {\r\n    followed: boolean\r\n    id: string\r\n    name: string\r\n    photos: {\r\n        large: string | null\r\n        small: string | null\r\n    }\r\n    status: string | null\r\n    uniqueUrlName: string | null\r\n}\r\n\r\n\r\n// export type UsersPagePropsType = {\r\n//     users: Array<UsersType>\r\n// }\r\n\r\nexport type UsersPagePropsType = typeof usersInitialState\r\n\r\n\r\nconst usersInitialState = {\r\n    users: [] as Array<UsersType>,\r\n    totalCount: 0,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<string>,\r\n}\r\n\r\n\r\nexport const usersReducer = (state = usersInitialState, action: ActionsTypes): UsersPagePropsType => {\r\n    switch (action.type) {\r\n        case FOLLOWString: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {\r\n                            ...u,\r\n                            followed: false\r\n                        }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case UNFOLLOWString: {\r\n\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {\r\n                            ...u,\r\n                            followed: true\r\n                        }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case SET_USERS : {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case SET_USERS_TOTAL_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        }\r\n        case SET_USERS_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case IS_FETCHING_USERS_LIST: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS: {\r\n\r\n            let stateCopy = {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n            return stateCopy\r\n        }\r\n\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nexport const setUpAllUsers = (pageSize: number, currentPage: number) => (dispatch: Dispatch) => {\r\n\r\n    dispatch(toggle_isFetching(true))\r\n    UsersAPI.getUsers(pageSize, currentPage).then((data) => {\r\n        dispatch(set_users_total_count(data.totalCount))\r\n        dispatch(set_users(data.items))\r\n        dispatch(toggle_isFetching(false))\r\n\r\n    })\r\n}\r\n\r\nexport const setUpCurrentPage = (pageSize: number, currentPage: number, pageNumber: number) => (dispatch: Dispatch) => {\r\n\r\n    dispatch(toggle_isFetching(true))\r\n    dispatch(set_users_currentPageSUCCESS(pageNumber))\r\n    UsersAPI.getUsers(pageSize, currentPage).then((data) => {\r\n        dispatch(set_users_total_count(data.totalCount))\r\n        dispatch(set_users(data.items))\r\n        dispatch(toggle_isFetching(false))\r\n    })\r\n}\r\n\r\n\r\nexport const followUser = (userId: string) => (dispatch: Dispatch) => {\r\n    dispatch(toggle_followingInProgress(true, userId,))\r\n    UsersAPI.foolowUser(userId, {}).then((data) => {\r\n        if (data.resultCode == 0) {\r\n            dispatch(unfollow_userSUCCESS(userId))\r\n            dispatch(toggle_followingInProgress(false, userId,))\r\n        }\r\n    })\r\n};\r\n\r\nexport const unfollowUser = (userId: string) => (dispatch: Dispatch) => {\r\n    dispatch(toggle_followingInProgress(true, userId,))\r\n    UsersAPI.unfollowUser(userId).then((data) => {\r\n        if (data.resultCode == 0) {\r\n            dispatch(follow_userSUCCESS(userId))\r\n            dispatch(toggle_followingInProgress(false, userId,))\r\n        }\r\n    })\r\n}","import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport styles from './Users.module.css';\r\nimport {UsersType} from '../../redux/usersReducer';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {UsersAPI} from '../../api/socialNetworkAPI';\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: Array<string>\r\n    onSetNewCurrentPage: (pageNumber: number) => void\r\n    followUser:(userID: string) => void\r\n    unfollowUser:(userID: string) => void\r\n\r\n\r\n\r\n}\r\n\r\nexport const Users: React.FC<UsersPropsType> = (props) => {\r\n\r\n\r\n    let pagesQuantity = Math.ceil(props.totalCount / props.pageSize);\r\n    let pagesArray = [];\r\n    for (let i = 1; i <= pagesQuantity; i++) {\r\n        pagesArray.push(i)\r\n    }\r\n\r\n\r\n\r\n    return <>            <ReactPaginate pageCount={pagesQuantity}\r\n                                        marginPagesDisplayed={1}\r\n                                        pageRangeDisplayed={2}\r\n                                        initialPage={props.currentPage}\r\n                                        onPageChange={(p) => {\r\n                                            props.onSetNewCurrentPage(p.selected)\r\n                                        }}\r\n                                        breakClassName={styles.breakMe}\r\n                                        containerClassName={styles.pagination}\r\n                                        activeClassName={styles.active}\r\n\r\n    />\r\n\r\n        <div>{props.users.map((u, i) => <div key={i}>\r\n        <span>\r\n            <div>\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <img src={(u.photos.small == undefined ? userPhoto : u.photos.small)}\r\n                         alt=\"Photo of user\"\r\n                         className={styles.userPhoto}/>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                {u.followed ?\r\n                    <button disabled={props.followingInProgress.some(id=>id===u.id)} onClick={() => {\r\n                        props.unfollowUser(u.id)\r\n                    }}>Unfollow</button> :\r\n\r\n                    <button disabled={props.followingInProgress.some(id=>id===u.id)} onClick={() => {\r\n                        props.followUser(u.id)\r\n                    }}>Following</button>}\r\n\r\n                    </div>\r\n                    </span>\r\n            <span>\r\n                    <span>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                    <div>u.location.country</div>\r\n                    <div>u.location.city</div>\r\n                    </span>\r\n                    </span>\r\n        </div>)}\r\n        </div>\r\n    </>\r\n}","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport styles from './Preloader.module.css';\r\n\r\nexport const Preloader = () => {\r\n    return <div className={styles.wrapper}>\r\n        <img src={preloader} alt=\"Rain Forest\"/>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {UsersType} from '../../redux/usersReducer';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nexport type UsersAPIComponentPropsType = {\r\n    users: Array<UsersType>\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<string>\r\n    onSetNewCurrentPage: (pageNumber: number) => void\r\n    toggle_isFetching: (isFetching: boolean) => void\r\n    setUpAllUsers:(pageSize: number, currentPage: number)=>void\r\n    setUpCurrentPage:(pageSize: number, currentPage: number,pageNumber: number)=>void\r\n    followUser:(userID: string) => void\r\n    unfollowUser:(userID: string) => void\r\n\r\n}\r\n\r\n\r\nexport class UsersAPIComponent extends React.Component<UsersAPIComponentPropsType> {\r\n    componentDidMount() {\r\n        this.props.setUpAllUsers(this.props.pageSize, this.props.currentPage)\r\n    }\r\n\r\n\r\n// on click to page number and update current page with axios request\r\n    onSetNewCurrentPage = (pageNumber: number) => {\r\n        this.props.setUpCurrentPage(this.props.pageSize, this.props.currentPage,pageNumber)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users users={this.props.users} currentPage={this.props.currentPage}\r\n                   onSetNewCurrentPage={this.onSetNewCurrentPage} pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount} unfollowUser={this.props.unfollowUser} followUser={this.props.followUser} followingInProgress={this.props.followingInProgress}/>\r\n        </>\r\n\r\n    }\r\n}","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {RootState} from '../../redux/storeRedux';\r\nimport {\r\n    followUser,\r\n    setUpAllUsers,\r\n    setUpCurrentPage,\r\n    toggle_followingInProgress,\r\n    toggle_isFetching,\r\n    unfollowUser\r\n} from '../../redux/usersReducer';\r\nimport {UsersAPIComponent} from './UsersAPIComponent';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../HOCs/withAuth';\r\nimport {\r\n    getUsers,\r\n    getTotalUsersCount,\r\n    getPageSize,\r\n    getCurrentPage,\r\n    getIsFetchingUsers,\r\n    getFriendsList\r\n} from '../util/reduxSelector';\r\n\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        users: getUsers(state),\r\n        totalCount: getTotalUsersCount(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetchingUsers(state),\r\n        followingInProgress: getFriendsList(state),\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const UsersContainer = compose<ComponentType>(withAuthRedirect, connect(mapStateToProps, {\r\n    toggle_isFetching, toggle_followingInProgress,\r\n    setUpAllUsers, setUpCurrentPage,\r\n    followUser, unfollowUser\r\n}))(UsersAPIComponent)\r\n\r\n\r\n\r\n\r\n\r\n","import React, {KeyboardEvent, useState, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    textAreaForUserStatus: string,\r\n    userID: string\r\n    showStatusTextInTextareaSuccess: (statusChanging: string) => void\r\n    updateUserStatus: (status: string,) => void\r\n    authorizedUserID: string\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHOC: React.FunctionComponent<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const setIsMode = (editMode: boolean) => {\r\n        if (props.userID == props.authorizedUserID) {\r\n            setEditMode(editMode)\r\n        }\r\n    }\r\n    const onKeyPress = (e: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.updateUserStatus(props.textAreaForUserStatus)\r\n            setIsMode(false)\r\n        }\r\n    }\r\n    return <>\r\n        {!editMode &&\r\n        <div>\r\n            <span onClick={() => setIsMode(true)}>{props.status}</span>\r\n        </div>\r\n        }\r\n        {editMode &&\r\n        <input autoFocus={true}\r\n               type=\"text\"\r\n               value={props.textAreaForUserStatus}\r\n               onBlur={() => setIsMode(false)}\r\n               onChange={(e) => props.showStatusTextInTextareaSuccess(e.currentTarget.value)}\r\n               onKeyPress={onKeyPress}/>\r\n        }\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\nimport {ProfilePropsType} from '../Profile';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\r\nimport {ProfileStatusWithHOC} from './ProfileStatus/ProfileStatusWithHOC';\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    } else return <div>\r\n        <div className={styles.img}>\r\n            <img\r\n                src=\"http://t3.gstatic.com/images?q=tbn:ANd9GcSGZixOf6Jx2wG29YrJGM4QGe9DXVWPJgz_7IwBjjSIHM3h0byU02kNdiSx8K4HpG_Eiz3Uxq6yDICJs7AZ-9c\"></img>\r\n        </div>\r\n        <div className={styles.descriptionBlok}>\r\n            <img src={(props.profile?.photos.large == undefined && props.profile?.photos.large == null) ? userPhoto: props.profile.photos.large} alt=\"Photo of user\" className={styles.userPhoto}/>\r\n            <h2>{props.profile?.fullName} </h2>\r\n            <h4>{props.profile?.aboutMe} </h4>\r\n            <ProfileStatusWithHOC status={props.status} textAreaForUserStatus={props.textAreaForUserStatus} userID={props.profile.userId} showStatusTextInTextareaSuccess={props.showStatusTextInTextareaSuccess} updateUserStatus={props.updateUserStatus} authorizedUserID={props.authorizedUserID}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import {ActionsTypes} from './state';\r\nimport {AuthAPI} from '../api/socialNetworkAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {LoginFormDataType} from '../components/Login/Login';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {authorizeUserSuccess} from './appReducer';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\n\r\nenum AUTH_REDUCER_ACTION_TYPE {\r\n    SET_AUTH_REDUCER_USER_DATA,\r\n    LOG_OUT_REDUCER_USER_DATA,\r\n    TOGGLE_IS_FETCHING_REDUCER_USER_DATA,\r\n}\r\n\r\n\r\n// type of user data from server\r\nexport type AuthUserData = {\r\n    id: null | string,\r\n    login: null | string,\r\n    email: null | string,\r\n}\r\n\r\n// action creator for set up to auth\r\nexport const setAuthUserData = (data: AuthUserData) => ({\r\n    type: AUTH_REDUCER_ACTION_TYPE.SET_AUTH_REDUCER_USER_DATA,\r\n    data,\r\n} as const)\r\n\r\n// action creator for log out from auth\r\nexport const logOutAuthUserData = () => ({\r\n    type: AUTH_REDUCER_ACTION_TYPE.LOG_OUT_REDUCER_USER_DATA,\r\n} as const)\r\n\r\n// action creator for change IsFetching value in AuthReducer\r\nexport const toggleIsFetchingInAuthReducer = (isFetching: boolean) => ({\r\n    type: AUTH_REDUCER_ACTION_TYPE.TOGGLE_IS_FETCHING_REDUCER_USER_DATA,\r\n    isFetching,\r\n} as const)\r\n\r\n// type of auth state\r\ninterface AuthStateType extends AuthUserData {\r\n    isAuth: boolean,\r\n    isFetching: boolean,\r\n}\r\n\r\nexport type LoginUserDispatchType = ThunkDispatch<any, any, any>\r\n\r\n// initial state for first start authReducer\r\nconst authInitialState: AuthStateType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    isFetching: false,\r\n}\r\n\r\n\r\nexport const authReducer = (state = authInitialState, action: ActionsTypes): AuthStateType => {\r\n    switch (action.type) {\r\n        case AUTH_REDUCER_ACTION_TYPE.SET_AUTH_REDUCER_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true,\r\n            };\r\n        }\r\n        case AUTH_REDUCER_ACTION_TYPE.LOG_OUT_REDUCER_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                email: null,\r\n                id: null,\r\n                login: null,\r\n                isAuth: false,\r\n            }\r\n        }\r\n        case AUTH_REDUCER_ACTION_TYPE.TOGGLE_IS_FETCHING_REDUCER_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\n// Thunk Creators\r\n\r\n// Check If current user authorized\r\nexport const setUserProfile = () => (dispatch: ThunkDispatch<AuthStateType, void, ActionsTypes>) => {\r\n    dispatch(toggleIsFetchingInAuthReducer(true));\r\n    (AuthAPI.authMe()\r\n        .then((res) => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(setAuthUserData(res.data))\r\n                dispatch(toggleIsFetchingInAuthReducer(false))\r\n            } else {\r\n                dispatch(logoutUser())\r\n            }\r\n        }))\r\n    let a = (AuthAPI.authMe()\r\n        .then((res) => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(setAuthUserData(res.data))\r\n                dispatch(toggleIsFetchingInAuthReducer(false))\r\n            } else {\r\n                dispatch(logoutUser())\r\n            }\r\n        }))\r\n    return a\r\n}\r\n// Authorize current user on the service\r\nexport const loginUser = (data: LoginFormDataType) => (dispatch: ThunkDispatch<AuthStateType, void, ActionsTypes>) => {\r\n    AuthAPI.login(data).then((res) => {\r\n        if (res.resultCode === 0) {\r\n            dispatch(setUserProfile())\r\n\r\n        } else {\r\n            dispatch(stopSubmit('login', {\r\n                email: res.messages,\r\n            }))\r\n        }\r\n    }).catch((error) => {\r\n        alert(error)\r\n    })\r\n}\r\n\r\n// delete cookie of current user\r\nexport const logoutUser = () => (dispatch: ThunkDispatch<AuthStateType, void, ActionsTypes>) => {\r\n    AuthAPI.logout().then((res) => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(logOutAuthUserData())\r\n                // dispatch(authorizeUserSuccess(false))\r\n            } else {\r\n                alert(`m from logoutUser authReducer ELSE ${res}`)\r\n            }\r\n        }\r\n    ).catch((error) => {\r\n\r\n        alert(`Im from logoutUser authReducer CATCH ${error}`)\r\n    })\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport styles from './Post.module.css';\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRQXfKnE7AhA5MsZLuFjHOFvPP1Mp36OXScKw&usqp=CAU\"/>\r\n            <div>\r\n                <span>{props.message}</span>\r\n                <div>\r\n                    <span>Like {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport styles from './MyPosts.module.css';\r\nimport {LoginFormDataType} from '../../Login/Login';\r\n\r\n\r\n\r\nconst PostTextarea : React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPost\" component=\"textarea\" type=\"text\" className={styles.text}/>\r\n            </div>\r\n            <button type=\"submit\" className={styles.button}>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst PostReduxForm = reduxForm<PostFormDataType>({\r\n    form: 'AddPostForm'\r\n})(PostTextarea)\r\n\r\n\r\nexport const AddPostForm = (props:PostFormPropsType) => {\r\n    const onSubmit = (formData: PostFormDataType) => {\r\n        props.addNewPost(formData.newPost)\r\n    }\r\n    return <div>\r\n        New post\r\n        <PostReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\n\r\ntype PostFormDataType = {\r\n    newPost: string\r\n}\r\n\r\ntype PostFormPropsType = {\r\n    addNewPost:(newPost: string)=>void}","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport Post, {PostType} from './Post/Post';\r\nimport {AddPostAC} from '../../../redux/profileReducer';\r\nimport {AddPostForm} from './AddPostForm';\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    showTextInTextarea: (e: ChangeEvent<HTMLTextAreaElement>)=>void\r\n    addNewPost:(newPostValue: string)=>void\r\n    textAreaState: string\r\n    posts: Array<PostType>\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n\r\n    const onClick = () => {\r\n        if (newPostElement.current && newPostElement.current.value.trim() !== \"\") {\r\n            let newPost = newPostElement.current.value;\r\n\r\n            props.addNewPost(newPost);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const onKeyPress=(e:KeyboardEvent<HTMLTextAreaElement>)=>{\r\n        if (e.key===\"Enter\"){\r\n            onClick();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AddPostForm addNewPost={props.addNewPost}/>\r\n\r\n            <div className={styles.posts}>\r\n                {props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount} key={p.id}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n//     return (\r\n//         <div>\r\n//             New post\r\n//             <div>\r\n//                 <div><textarea className={styles.text} ref={newPostElement} value={props.textAreaState}\r\n//                                onChange={props.showTextInTextarea} onKeyPress={onKeyPress}></textarea></div>\r\n//                 <div>\r\n//                     <button className={styles.button} onClick={onClick}>Add post</button>\r\n//                 </div>\r\n//             </div>\r\n//\r\n//             <div className={styles.posts}>\r\n//                 {props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount} key={p.id}/>)}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\nexport default MyPosts;","import React, {ChangeEvent} from \"react\";\r\n\r\nimport {AddPostAC, ProfileReducer, ShowPostTextInTextareaAC} from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport { RootState} from '../../../redux/storeRedux';\r\nimport {connect} from 'react-redux';\r\nimport {PostType} from './Post/Post';\r\nimport {DispatchType} from '../../../redux/state';\r\n\r\ntype mapStateToPropsReturnType = {\r\n    textAreaState: string\r\n    posts: Array<PostType>\r\n}\r\ntype mapDispatchToPropsReturnType = {\r\n    showTextInTextarea: (e: ChangeEvent<HTMLTextAreaElement>)=>void\r\n    addNewPost:(newPost: string)=>void\r\n}\r\n\r\nconst mapStateToProps = (state:RootState) => ({\r\n    textAreaState: state.profilePage.textAreaForUserStatus,\r\n    posts:state.profilePage.posts\r\n})\r\nconst mapDispatchToProps = (dispatch:DispatchType):mapDispatchToPropsReturnType => ({\r\n    addNewPost: (newPost: string ) => dispatch(AddPostAC(newPost)),\r\n    showTextInTextarea: (e: ChangeEvent<HTMLTextAreaElement>) => dispatch(ShowPostTextInTextareaAC(e.currentTarget.value))\r\n})\r\n\r\nexport const MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {PostType} from \"./MyPosts/Post/Post\";\r\nimport {MyPostsContainer} from './MyPosts/MyPostsConteiner';\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    textAreaForUserStatus: string\r\n    showStatusTextInTextareaSuccess: (statusChanging: string) => void\r\n    updateUserStatus: (status: string,) =>void\r\n    authorizedUserID: string\r\n\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: {\r\n        facebook: string | null,\r\n        website: string | null,\r\n        vk: string | null,\r\n        twitter: string | null,\r\n        instagram: string | null,\r\n        youtube: string | null,\r\n        github: string | null,\r\n        mainLink: string | null,\r\n    }\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string | null,\r\n    userId: string\r\n    photos: {\r\n        small: string | null,\r\n        large: string | null,\r\n    },\r\n}\r\n\r\n\r\n\r\nexport type PostsStatePropsType = {\r\n    posts: Array<PostType>\r\n    newPostInTextArea:string\r\n    profile: ProfileType | null\r\n    textAreaForUserStatus:string\r\n    status: string\r\n    authorizedUserID: string\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} textAreaForUserStatus={props.textAreaForUserStatus}  showStatusTextInTextareaSuccess={props.showStatusTextInTextareaSuccess} updateUserStatus={props.updateUserStatus} authorizedUserID={props.authorizedUserID}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile, {ProfileType} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/storeRedux';\r\nimport {\r\n    AddPostAC, getUserProfile,\r\n    setNewProfile,\r\n    setUserStatus,\r\n    showStatusTextInTextareaSuccess,\r\n    updateUserStatus\r\n} from '../../redux/profileReducer';\r\nimport axios from 'axios';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../HOCs/withAuth';\r\nimport {compose} from 'redux';\r\nimport {getIsAuth, getProfile, getRegisteredUserId, getTextAreaForStatus, getUserStatus} from '../util/reduxSelector';\r\n\r\n\r\ntype URLMatchParamsType = { userID: string }\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType & RouteComponentProps<URLMatchParamsType>> {\r\n    componentDidMount() {\r\n\r\n\r\n        let currentUserID: string = this.props.match.params.userID\r\n        if (!currentUserID) {\r\n            currentUserID = this.props.authorizedUserID\r\n        }\r\n\r\n        this.props.getUserProfile(currentUserID)\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + currentUserID, {\r\n        //     withCredentials: true,\r\n        // }).then(response => {\r\n        //     this.props.setNewProfile(response.data)\r\n        //     this.props.setUserStatus(currentUserID)\r\n        // })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props} />\r\n\r\n    }\r\n}\r\n\r\ntype ProfilePropsType = {\r\n    authorizedUserID: string\r\n    isAuth: boolean\r\n    profile: ProfileType | null\r\n    textAreaForUserStatus: string\r\n    status: string\r\n    getUserProfile: (id: string) => Function\r\n    showStatusTextInTextareaSuccess: (statusChanging: string) => void\r\n    updateUserStatus: (status: string,) => void\r\n\r\n\r\n}\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profile: getProfile(state),\r\n        textAreaForUserStatus: getTextAreaForStatus(state),\r\n        status: getUserStatus(state),\r\n        authorizedUserID: getRegisteredUserId(state),\r\n        isAuth: getIsAuth(state),\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, withRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfile, updateUserStatus, showStatusTextInTextareaSuccess,\r\n    }))(ProfileContainer)","import styles from '../Header.module.css';\r\nimport logoRF from '../logoRF.png';\r\nimport logoRF_mobile from '../logoRF_mobile.png';\r\nimport React from 'react';\r\n\r\nexport const SiteLogo=()=>{\r\n    return <div className={styles.site_logo}>\r\n        <img src={logoRF} alt=\"Rain Forest\" className={styles.desktop}/>\r\n        <img src={logoRF_mobile} alt=\"Rain Forest\" className={styles.mobile}/>\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport styles from './Header.module.css';\r\nimport logoRF from './logoRF.png';\r\nimport logoRF_mobile from './logoRF_mobile.png';\r\nimport {FaAlignJustify, FaAngleDoubleRight, FaEnvelope, FaConciergeBell, FaUserAlt} from 'react-icons/fa'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {SiteLogo} from './SiteLogoComp/SiteLogo';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype HeaderPropsType = {\r\n    registeredUserId: null | string,\r\n    registeredUserLogin: null | string,\r\n    isAuth: boolean,\r\n    isFetching: boolean,\r\n    logoutUser: () => (dispatch: Dispatch) => void,\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    let [hideMenu, setHideMenu] = useState<boolean>(false);\r\n    const onMenuStyle = {\r\n        display: hideMenu ? 'none' : 'block',\r\n    };\r\n    const offMenuStyle = {\r\n        display: hideMenu ? 'block' : 'none',\r\n    };\r\n    return (\r\n        <header className={styles.header}>\r\n            <SiteLogo/>\r\n            <div className={styles.bar}>\r\n                <div className={styles.left_content}>\r\n                    <FaAlignJustify size={'1.3rem'} color={'#20B2AA'} style={onMenuStyle} onClick={() => {\r\n                        setHideMenu(true)\r\n                    }}/>\r\n                    <FaAngleDoubleRight size={'1.3rem'} color={'#20B2AA'} style={offMenuStyle} onClick={() => {\r\n                        setHideMenu(false)\r\n                    }}/>\r\n                </div>\r\n                <div className={styles.right_content}>\r\n                    <div className={styles.icon_avatar}>\r\n                        <div className={styles.icon_avatar_text}><NavLink\r\n                            to={'/profile/' + props.registeredUserId}><FaUserAlt size={'1.3rem'}\r\n                                                                                 color={'#20B2AA'}/>\r\n                            <div\r\n                                className={styles.icon_messages_text}>{props.isAuth ? props.registeredUserLogin : <>Profile</>}</div>\r\n\r\n                        </NavLink></div>\r\n                    </div>\r\n                    <div className={styles.icon_messages}>\r\n                        <NavLink to=\"/dialogs\"> <FaEnvelope size={'1.3rem'} color={'#20B2AA'}/>\r\n                            <div className={styles.icon_messages_text}>Messages</div>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={styles.icon_alerts}>\r\n                        <a href=\"#\">\r\n                            <FaConciergeBell size={'1.3rem'} color={'#20B2AA'}/>\r\n                            <div className={styles.icon_alerts_text}>Alerts\r\n                            </div>\r\n                        </a>\r\n                    </div>\r\n                    {props.isAuth && <div className={styles.sign_off} onClick={props.logoutUser}>\r\n                        <a href=\"#\">Logout</a>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const required = (value:number) => (value || typeof value === 'number' ? undefined : 'Required')\r\n\r\n const maxLength = (max:number) => (value:string) =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n\r\nexport const maxLength30=maxLength(30)\r\n\r\n const minLength = (min:number) => (value:string) =>\r\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\r\n\r\nexport const minLength5=minLength(5)\r\n\r\n\r\nexport const emailValidator = (value:string) =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined\r\n\r\n","import {ActionsTypes} from './state';\r\nimport {AuthAPI} from '../api/socialNetworkAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {LoginFormDataType} from '../components/Login/Login';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {AddPostAC} from './profileReducer';\r\nimport {setUserProfile} from './authReducer';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\n// TYPES\r\n\r\n// types of type for action creators\r\nenum APP_ACTION_TYPE {\r\n    AUTHORIZE = 'APP_REDUCER_ACTION_TYPE_AUTHORIZE_USER_ON_THE_NETWORK'\r\n}\r\n\r\n// type of authorizeUserSuccess action creator\r\ntype authorizeUserSuccessType = ReturnType<typeof authorizeUserSuccess>\r\n\r\n// type of app state\r\ntype AppStateType = typeof initialState;\r\n\r\n// type of all actions\r\ntype AppActionsTypes =\r\n    | ReturnType<typeof authorizeUserSuccess>\r\n\r\n\r\n//ACTION CREATOR\r\n\r\n// action creator for set up to auth\r\nexport const authorizeUserSuccess = (authorize: boolean) => ({\r\n    type: APP_ACTION_TYPE.AUTHORIZE,\r\n    authorize,\r\n} as const)\r\n\r\n// initial state for first start appReducer\r\nconst initialState = {\r\n    authorize: false,\r\n}\r\n\r\n// Reducer\r\nexport const appReducer = (state = initialState, action: AppActionsTypes): AppStateType => {\r\n    switch (action.type) {\r\n        case APP_ACTION_TYPE.AUTHORIZE: {\r\n            return {\r\n                ...state,\r\n                authorize: action.authorize,\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\n// Thunk Creators\r\n\r\n// Check If current user authorized\r\nexport const authorizeUser = () => (dispatch: ThunkDispatch<AppStateType, void, AppActionsTypes>) => {\r\n    dispatch(setUserProfile()).then((rest: any) => {\r\n        dispatch(authorizeUserSuccess(true))\r\n    })\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Header} from './Header';\r\nimport {RootState} from '../../redux/storeRedux';\r\nimport {connect} from 'react-redux';\r\nimport {AuthUserData, logoutUser, setUserProfile,} from '../../redux/authReducer';\r\nimport axios from 'axios';\r\nimport {UsersAPI} from '../../api/socialNetworkAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {getRegisteredUserId, getRegisteredUserLogin, getIsAuth, getIsFetching} from '../util/reduxSelector';\r\n\r\n\r\ntype  HeaderContainerPropsType = {\r\n    registeredUserId: null | string,\r\n    registeredUserLogin: null | string,\r\n    isAuth: boolean,\r\n    isFetching: boolean,\r\n    logoutUser: () => (dispatch: Dispatch) => void,\r\n    setUserProfile: () => void,\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} isFetching={this.props.isFetching}\r\n                       registeredUserId={this.props.registeredUserId}\r\n                       registeredUserLogin={this.props.registeredUserLogin}\r\n                       logoutUser={this.props.logoutUser}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    registeredUserId: getRegisteredUserId(state),\r\n    registeredUserLogin: getRegisteredUserLogin(state),\r\n    isAuth: getIsAuth(state),\r\n    isFetching: getIsFetching(state),\r\n})\r\n\r\nexport default connect(mapStateToProps, {logoutUser,})\r\n    //@ts-ignore\r\n    (HeaderContainer)","// input: {name: \"email\", onBlur: ƒ, onChange: ƒ, onDragStart: ƒ, onDrop: ƒ, …}\r\n// label: \"Email\"\r\n// meta: {active: false, asyncValidating: false, autofilled: false, dirty: false, dispatch: ƒ, …}\r\n// placeholder: \"Email\"\r\n// type: \"email\"\r\n\r\n\r\nimport React from 'react';\r\nimport styles from './RenderField.module.css';\r\n\r\ntype RenderFieldPropsType = any\r\n\r\nexport const RenderField: React.FC<RenderFieldPropsType> = (props) => {\r\n    const {input, label, placeholder, type, meta: {touched, error, warning}} = props\r\n    const hasError = touched && error\r\n    return <div className={(error? styles.error:\"\")}>\r\n        <label>{label}</label>\r\n        <div>\r\n            <input {...input} placeholder={placeholder} type={type}/>\r\n            {(error && <span>{error}</span>)}\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {emailValidator, maxLength30, minLength5, required} from '../util/validators';\r\nimport {RenderField} from '../common/RenderField/RenderField';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    followUser,\r\n    setUpAllUsers,\r\n    setUpCurrentPage,\r\n    toggle_followingInProgress,\r\n    toggle_isFetching, unfollowUser\r\n} from '../../redux/usersReducer';\r\nimport {UsersAPIComponent} from '../Users/UsersAPIComponent';\r\nimport {loginUser} from '../../redux/authReducer';\r\nimport {RootState} from '../../redux/storeRedux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = (props) => {\r\n\r\n    const {handleSubmit, pristine, reset, submitting} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'}\r\n                       name={'email'}\r\n                       component={RenderField}\r\n                       label=\"Email\"\r\n                       validate={emailValidator}\r\n                       type={'email'}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'}\r\n                       name={'password'}\r\n                       component={'input'}\r\n                       type={'password'}\r\n                       validate={[required, maxLength30, minLength5]}/>\r\n            </div>\r\n            <div>Remember me\r\n                <Field name={'rememberMe'}\r\n                       component={'input'}\r\n                       type={'checkbox'}/>\r\n            </div>\r\n            <button type=\"submit\" disabled={submitting}>Log In</button>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<LoginFormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        props.loginUser(formData)\r\n    }\r\n    // if (props.authorize) {\r\n    //     return <Redirect to=\"/profile/12113\"/>\r\n    //\r\n    // } else {\r\n        return <>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </>\r\n    // }\r\n}\r\n\r\nexport type LoginFormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\ntype DispatchPropsType = {\r\n    loginUser: (data: LoginFormDataType) => Function\r\n}\r\n\r\n\r\n// Types\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype LoginPropsType = {\r\n    loginUser: (data: LoginFormDataType) => Function\r\n    authorize: boolean\r\n}\r\n\r\n\r\n// mapStateToProps\r\nconst mapStateToProps = (state: RootState) => ({\r\n    authorize: state.app.authorize\r\n})\r\n\r\n\r\nexport const LoginContainer = connect<mapStateToPropsType, DispatchPropsType, {}, RootState>(mapStateToProps, {loginUser})(Login)","import React, {ComponentType} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport Music from './components/Music/Music';\r\nimport News from './components/News/News';\r\nimport Settings from './components/Settings/Settings';\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer';\r\nimport {UsersContainer} from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport {LoginContainer} from './components/Login/Login';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {setUserProfile} from './redux/authReducer';\r\nimport {withAuthRedirect} from './components/HOCs/withAuth';\r\nimport {getUserProfile, showStatusTextInTextareaSuccess, updateUserStatus} from './redux/profileReducer';\r\nimport {RootState} from './redux/storeRedux';\r\nimport {authorizeUser} from './redux/appReducer';\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\n\r\ntype AppStatePropsType = {\r\n    authorizeUser: Function\r\n    authorize: boolean\r\n}\r\n\r\nclass App extends React.Component<AppStatePropsType> {\r\n    componentDidMount() {\r\n        this.props.authorizeUser()\r\n    }\r\n\r\n    render() {\r\n    if (!this.props.authorize){\r\n        return <Preloader/>\r\n    }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <div className=\"content-container\">\r\n                    <Navbar/>\r\n                    <div className=\"app-wrapper-content\">\r\n\r\n                        <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n\r\n\r\n                        <Route path='/profile/:userID?' render={() => <ProfileContainer/>}/>\r\n\r\n                        <Route path='/music' component={Music}/>\r\n                        <Route path='/news' component={News}/>\r\n                        <Route path='/settings' component={Settings}/>\r\n                        <Route path='/users' component={UsersContainer}/>\r\n                        <Route path='/lang' component={LoginContainer}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// map state to props\r\nconst mstp =(state:RootState)=>({\r\n    authorize:state.app.authorize\r\n})\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mstp, {authorizeUser}))(App)\r\n\r\n\r\n","import React from 'react';\r\nimport {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport {dilogsReducer} from './dialogsReducer';\r\nimport {profileReducer} from './profileReducer';\r\nimport {usersReducer} from './usersReducer';\r\nimport {authReducer} from './authReducer';\r\nimport thunk from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from './appReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n        dialogsPage: dilogsReducer,\r\n        profilePage: profileReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n        form: formReducer,\r\n        app: appReducer,\r\n    }\r\n)\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nexport let store = createStore(rootReducer, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()),)\r\n// @ts-ignore\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport type StoreReduxType = typeof store\r\n\r\n\r\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {store} from './redux/storeRedux';\r\nimport { Provider } from 'react-redux'\r\n\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <BrowserRouter>\r\n                <Provider store={store}>\r\n                    <App />\r\n                </Provider>\r\n            </BrowserRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nstore.subscribe(rerenderEntireTree);\r\nrerenderEntireTree();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3LdZz\",\"button\":\"MyPosts_button__1VJfl\",\"text\":\"MyPosts_text__30xwP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2FA0o\",\"currentPage\":\"Users_currentPage__3PpbK\",\"page\":\"Users_page__30TSE\",\"pagination\":\"Users_pagination__2b1V0\",\"active\":\"Users_active__1FP8H\"};","module.exports = __webpack_public_path__ + \"static/media/user.908d8322.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__1qZLo\",\"descriptionBlok\":\"ProfileInfo_descriptionBlok__SgIlX\",\"userPhoto\":\"ProfileInfo_userPhoto__3xsM5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2FllA\",\"item\":\"Navbar_item__2HJ7A\",\"active\":\"Navbar_active__1Ck8g\",\"item_value\":\"Navbar_item_value__1nSCr\",\"navLink\":\"Navbar_navLink__29_LQ\"};"],"sourceRoot":""}